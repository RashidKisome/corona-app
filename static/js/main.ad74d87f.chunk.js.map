{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","style","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad74d87f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\"; // Bibliotek för att uppdatera datan \"live\" utan refresh,\nimport cx from \"classnames\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  // console.log(props);\n  // om datan inte existerar, if statement nedan\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  // console.log(confirmed);\n\n  // Typography material-ui används för text\n\n  /*  Borde refaktorera det här så att det inte är inte är repetitive code \n  1.skapa map() ? \n  2.skapa en array med datan ? \n  3.loopa över 3 objekt, infected, recovered, deaths.....\n  */\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              {\" \"}\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />{\" \"}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}{\" \"}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              {\" \"}\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />{\" \"}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}{\" \"}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              {\" \"}\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />{\" \"}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}{\" \"}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  // Hämtar datan och returnera bara den datan vi behöver som vi sedan sätter i statet\n  let changeableUrl = url;\n\n  // om landet finns, så sätter vi urlen till .....\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  // bättre än .then och .catch pga läsbarhet\n  try {\n    // destrukturera datan {}\n    const {\n      data: {\n        /*destruct alla properties i datan så vi itne behöver göra data.[property]*/\n        confirmed,\n        recovered,\n        deaths,\n        lastUpdate,\n      },\n    } = await axios.get(changeableUrl);\n    // console.log(response);\n\n    // hämta bara det vill vi vill ha från datan\n    const modifiedData = {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate /* data.lastUpdate, */,\n    };\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    // den här gången så kommer datan att vara i en array\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    // Här vill vi bara ha länderna, destrukturera datan till länder\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    // console.log(countries);\n    return countries.map(\n      (country) => country.name // här mappar vi och returnerar det specifika landet\n    );\n  } catch (error) {}\n}; // sen skickar vi iväg den till CountryPicker\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport style from \"./Chart.module.css\";\n// Datan kommer från fetchDailyData()\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]); // Jag hade en array inuti där inuti och då buggade skiten\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    // console.log(dailyData);\n    // Här callar vi fetchAPI\n    fetchAPI();\n  }, []); // Tom array i useEffekten så att den beter som componentDidMount, innan så hämtade den datan oändligt..\n  /* om dailydatan INTE är 0 så returneras charten */ const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        // Vi loopar över datan sen visar vi linecharten som använder reacts chartjs2\n        labels: dailyData.map(({ date }) => date), // returnerar en array av alla datum\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: \"true\", // fyller\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: `rgba(255, 0, 0, 0.5)`,\n            fill: \"true\", // fyller\n          },\n        ],\n      }}\n    />\n  ) : null;\n  console.log(confirmed, recovered, deaths);\n\n  // barChart\n  /* om den existerar */ const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={style.container}>{country ? barChart : lineChart} </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport styles from \"./CountryPicker.module.css\";\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  // När vi har valt land så går vi tillbaks till App.js\n  const [fetchedCountries, setFetchedCountries] = useState([]); // sätter länder till en array\n\n  useEffect(\n    () => {\n      const fetchAPI = async () => {\n        // Här fetchar vi länderna som är en array av 180 länder\n        setFetchedCountries(await fetchCountries());\n      };\n      fetchAPI();\n    },\n    /* endast förandras när fetchedCountries förändras*/ [setFetchedCountries]\n  ); // callback från useEffect\n\n  return (\n    <div>\n      <FormControl className={styles.formControl}>\n        <NativeSelect\n          defaultValue=\"\"\n          onChange={(e) => handleCountryChange(e.target.value)}\n        >\n          <option value=\"\">Global</option>{\" \"}\n          {/* buggen med global var för att jag hade satt \"global\" som värde innan, det ska var en tom sträng*/}\n          {fetchedCountries.map((\n            country,\n            i // loopa över länderna\n          ) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n  // Enda klassbaserade komponenten i applikationen\n  // Vi behöver inte använda constructor här för att det sker i bakgrunden\n  state = {\n    data: {},\n    // statet för CountrPickern\n    country: \"\",\n  };\n  async componentDidMount() {\n    // async före didMount för att göra funktionen asynchronous\n    const fetchedData = await fetchData(); // didMount gör en request till fetchData() som ligger i \"api\" foldern\n    //  console.log(data);\n    this.setState({ data: fetchedData });\n  }\n  // Metoden som ska ändra statet på country async()\n  handleCountryChange = async (country) => {\n    // Här får vi landet som parameter och requestar igen till fetchData API men denna gånna så ändrar den land\n    const fetchedData = await fetchData(country);\n\n    console.log(country);\n    // hämta datan först sen sätt statet\n    // Passa ner metoden metoden som en prop ner till CountryPicker Componenten\n\n    this.setState({ data: fetchedData, country: country });\n  };\n  render() {\n    // destrukturera datan innan vi stoppar in den i komponenterna\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n        {\" \"}\n        {/*  @material-ui */}\n        {/* styles.container ist för \" container så det inte krockar med andra css filer \"*/}\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    ); // Datan på Chart kommer också från Chart komponenten\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}